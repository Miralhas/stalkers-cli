import os
from pathlib import Path
from types import SimpleNamespace
from typing import Tuple

import typer
from core.all import execute
from core.format import Format
from core.metadata import AvailableSources, get_source
from typing_extensions import Annotated
from utils import OUTPUT_FOLDER_NAME, dump_json, open_in_file_explorer

app = typer.Typer(no_args_is_help=True, add_completion=False)

OPTIONS_HELP_TEXT = {
    "root" : "Root folder generated by the lightnovel-crawler script",
    "source": "Source from which the metadata will be extracted",
    "novel_uri" : "Uri for the novel from the selected source website",
    "range": "Range of chapters to be formated. E.g. --range 100 200."
}

@app.callback()
def main(
    ctx: typer.Context,
    root: Annotated[Path, typer.Option('--root','-r', help=OPTIONS_HELP_TEXT["root"], prompt="Root Folder", exists=True)] = None,
):
    if not root:
        print("Missing root folder. Pass --root / -r")
        raise typer.Exit(1)
    
    # create output folder (root/formatteed-novel)
    output_folder = Path(f"{root}/{OUTPUT_FOLDER_NAME}")
    output_folder.mkdir(parents=True, exist_ok=True)

    ctx.obj = SimpleNamespace(root = root, output_folder=output_folder)


@app.command('all', help="Run all metadata/format scripts together.")
def all(
    ctx: typer.Context,
    source: Annotated[AvailableSources, typer.Option('--source','-s', help=OPTIONS_HELP_TEXT["source"], prompt=True, case_sensitive=False)] = None,
    novel_uri: Annotated[str, typer.Option('--novel-uri', '-u', help=OPTIONS_HELP_TEXT["novel_uri"], prompt="Novel URI")] = None,
):
    format_instance = Format(ctx.obj.root, ctx.obj.output_folder)
    metadata_source = get_source(value=source)(novel_uri=novel_uri, output_folder=ctx.obj.output_folder)

    novel = execute(source=metadata_source, format_instance=format_instance)
    novel_file = Path(f"{ctx.obj.output_folder}/novel.json")

    dump_json(novel_file, novel)

    open_in_file_explorer(ctx.obj.output_folder)


@app.command('metadata', help="Script that extracts some metadatas of a given novel.")
def metadata(
    ctx: typer.Context,
    source: Annotated[AvailableSources, typer.Option('--source','-s', help=OPTIONS_HELP_TEXT["source"], prompt=True)] = None,
    novel_uri: Annotated[str, typer.Option('--novel-uri', '-u',help=OPTIONS_HELP_TEXT["novel_uri"], prompt="Novel URI")] = None
):
    
    metadata_source = get_source(value=source)(novel_uri=novel_uri, output_folder=ctx.obj.output_folder)
    metadata_source.extract_metadata()

    open_in_file_explorer(ctx.obj.output_folder)


@app.command('format', help="This script extracts all the chapters and metadatas of a given root folder (folder generated by the lightnovel-crawler script) into a single json that follows the Stalkers API standards.")
def format(
    ctx: typer.Context,
    range: Annotated[Tuple[int, int], typer.Option('--range', help=OPTIONS_HELP_TEXT["range"])] = None,
):
    format_instance = Format(ctx.obj.root, ctx.obj.output_folder)
    
    if (range is None):
        format_instance.execute()
    else:
        format_instance.execute_range(range)

    open_in_file_explorer(ctx.obj.output_folder)


if __name__ == "__main__":
    app()
