from pathlib import Path
from types import SimpleNamespace

import typer
from core.scripts import generate_download_list
from typing_extensions import Annotated
from utils import OUTPUT_FOLDER_NAME, open_in_file_explorer

app = typer.Typer(no_args_is_help=True, add_completion=False)

OPTIONS_HELP_TEXT = {
    "root": "Root folder generated by the lightnovel-crawler script",
    "start": "Chapter number that the script will start downlownding it",
    "end": "Chapter number that the script will stop downlownding it",
    "range": "Range of chapters that will be downloaded between the scripts",
    "source": "Source from where the chapters will be downloaded (E.g. 'https://novelnext.com/books/the-authors-pov')",
    "sleep": "Sleep between downloads",
}

@app.callback()
def main(
    ctx: typer.Context,
    root: Annotated[Path,typer.Option("--root", "-r", help=OPTIONS_HELP_TEXT["root"], prompt="Root Folder", exists=True)] = None,
):
    if not root:
        print("Missing root folder. Pass --root / -r")
        raise typer.Exit(1)

    # create output folder (root/formatted-novel) if it doesn't exists
    output_folder = Path(f"{root}/{OUTPUT_FOLDER_NAME}")
    output_folder.mkdir(parents=True, exist_ok=True)

    ctx.obj = SimpleNamespace(root=root, output_folder=output_folder)

@app.command("dl-list", help="This script generates a powershell script that automates the downloading of chapters from a given source into sequential ranges. It is useful against sources that have a rate limit.")
def generate_chapters_download_list_script(
    ctx: typer.Context,
    start: Annotated[int, typer.Option('--start', '-s', help=OPTIONS_HELP_TEXT["start"], prompt="start index")] = None,
    end: Annotated[int, typer.Option('--end', '-e', help=OPTIONS_HELP_TEXT["end"], prompt="end index")] = None,
    range: Annotated[int, typer.Option('--range', '-rg', help=OPTIONS_HELP_TEXT["range"], prompt=True)] = None,
    source: Annotated[str, typer.Option('--source', '-src', help=OPTIONS_HELP_TEXT["source"], prompt=True)] = None,
    sleep: Annotated[str, typer.Option('--sleep', help=OPTIONS_HELP_TEXT["sleep"])] = 5,
):
    generate_download_list(
        output=ctx.obj.root,
        range_chapters=range,
        source=source,
        start_index=start,
        end_index=end,
        sleep=sleep
    )

    open_in_file_explorer(ctx.obj.root)


if __name__ == "__main__":
    app()
