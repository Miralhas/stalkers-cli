import os
from enum import Enum
from pathlib import Path
from types import SimpleNamespace
from typing import Tuple

import typer
from core.all import execute
from core.format import Format
from core.metadata import AvailableSources, RoyalRoadSource, get_source
from core.req import Client
from typing_extensions import Annotated
from utils import OUTPUT_FOLDER_NAME, dump_json

app = typer.Typer(
    help="Collection of scripts that clean, extract, make requests and format a novel.",
    add_completion=True,
    no_args_is_help=True
)

def open_output_prompt(output_path: Path):
    open_output = typer.confirm("Open output folder?", default=True)
    if (open_output):
        os.startfile(output_path)

class RequestType(str, Enum):
    novel = "novel"
    chapters = "chapters"


OPTIONS_HELP_TEXT = {
    "root" : "Root folder generated by the lightnovel-crawler script",
    "source": "Source from which the metadata will be extracted",
    "novel_uri" : "Uri for the novel from the selected source website",
    "with_image": "Specify whether the order will send an image along with the novel",
    "novel_path": "Path containg the novel json file that will be sent to the Stalkers API",
    "req_type": "Type of request",
    "range": "Range of chapters to be formated. E.g. --range 100 200."
}


@app.command('metadata', help="Script that extracts some metadatas of a given novel.")
def metadata(
    ctx: typer.Context,
    source: Annotated[AvailableSources, typer.Option('--source','-s', help=OPTIONS_HELP_TEXT["source"], prompt=True)] = None,
    novel_uri: Annotated[str, typer.Option('--novel-uri', '-u',help=OPTIONS_HELP_TEXT["novel_uri"], prompt="Novel URI")] = None
):
    
    metadata_source = get_source(value=source)(novel_uri=novel_uri, output_folder=ctx.obj.output_folder)
    metadata_source.extract_metadata()

    open_output_prompt(ctx.obj.output_folder)


@app.command('format', help="This script extracts all the chapters and metadatas of a given root folder (folder generated by the lightnovel-crawler script) into a single json that follows the Stalkers API standards.")
def format(
    ctx: typer.Context,
    range: Annotated[Tuple[int, int], typer.Option('--range', help=OPTIONS_HELP_TEXT["range"])] = None,
):
    format_instance = Format(ctx.obj.root, ctx.obj.output_folder)
    
    if (range is None):
        format_instance.execute()
    else:
        format_instance.execute_range(range)

    open_output_prompt(ctx.obj.output_folder)


@app.command('all', help="Run all metadata/format scripts together.")
def all(
    ctx: typer.Context,
    source: Annotated[AvailableSources, typer.Option('--source','-s', help=OPTIONS_HELP_TEXT["source"], prompt=True, case_sensitive=False)] = None,
    novel_uri: Annotated[str, typer.Option('--novel-uri', '-u', help=OPTIONS_HELP_TEXT["novel_uri"], prompt="Novel URI")] = None,
):
    format_instance = Format(ctx.obj.root, ctx.obj.output_folder)
    metadata_source = get_source(value=source)(novel_uri=novel_uri, output_folder=ctx.obj.output_folder)

    novel = execute(source=metadata_source, format_instance=format_instance)
    novel_file = Path(f"{ctx.obj.output_folder}/novel.json")

    dump_json(novel_file, novel)

    open_output_prompt(ctx.obj.output_folder)


@app.command('req', help="Send a Novel request to the Stalkers API")
def request_stalkers_api(
    ctx: typer.Context,
    type: Annotated[RequestType, typer.Option('--req-type','-t', help=OPTIONS_HELP_TEXT["req_type"], prompt=True, case_sensitive=False)] = None,
):
    client = Client()
    match type:
        case RequestType.novel:
            with_image = typer.confirm("With Image?", default=True)
            novel_file = Path(f"{ctx.obj.output_folder}/novel.json")
            client.novel_request(novel_file=novel_file, root_path=ctx.obj.root, with_image=with_image)
        case RequestType.chapters:
            novel_slug = typer.prompt("Novel Slug")
            chapters_file_name = typer.prompt("Chapters file")
            chapters_file = Path(f"{ctx.obj.output_folder}/{chapters_file_name}")
            client.bulk_chapters_request(chapters_file=chapters_file, novel_slug=novel_slug)


@app.callback()
def main(
    ctx: typer.Context,
    root: Annotated[Path, typer.Option('--root','-r', help=OPTIONS_HELP_TEXT["root"], prompt="Root Folder", exists=True)] = None,
):
    if not root:
        print("Missing root folder. Pass --root / -r")
        raise typer.Exit(1)
    
    # create output folder (root/formatteed-novel)
    output_folder = Path(f"{root}/{OUTPUT_FOLDER_NAME}")
    output_folder.mkdir(parents=True, exist_ok=True)

    ctx.obj = SimpleNamespace(root = root, output_folder=output_folder)


if __name__ == "__main__":
    app()
